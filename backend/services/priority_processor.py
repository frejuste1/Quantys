import pandas as pd
import logging
from typing import Tuple, List, Dict, Any, Optional
from services.lotecart_processor import LotecartProcessor

logger = logging.getLogger(__name__)

class PriorityProcessor:
    """
    Processeur avec gestion stricte des priorit√©s:
    1. LOTECART (priorit√© absolue - traitement complet)
    2. Autres ajustements (apr√®s validation LOTECART)
    3. G√©n√©ration fichier final (avec coh√©rence garantie)
    """
    
    def __init__(self):
        self.lotecart_processor = LotecartProcessor()
        self.processing_summary = {}
        self.lotecart_validated = False
    
    def process_with_strict_priority(
        self, 
        completed_df: pd.DataFrame, 
        original_df: pd.DataFrame,
        strategy: str = "FIFO"
    ) -> Dict[str, Any]:
        """
        Traite les donn√©es avec priorisation STRICTE LOTECART
        
        √âTAPES OBLIGATOIRES:
        1. Traitement complet LOTECART
        2. Validation LOTECART (blocante)
        3. Traitement autres ajustements
        4. G√©n√©ration fichier final
        """
        try:
            logger.info("üöÄ D√âBUT DU TRAITEMENT AVEC PRIORISATION STRICTE LOTECART")
            
            # √âTAPE 1: Traitement prioritaire et complet des LOTECART
            logger.info("üìç √âTAPE 1: TRAITEMENT PRIORITAIRE COMPLET LOTECART")
            
            lotecart_result = self._process_lotecart_completely(completed_df, original_df)
            
            # √âTAPE 2: Validation stricte LOTECART (BLOCANTE)
            logger.info("üìç √âTAPE 2: VALIDATION STRICTE LOTECART (BLOCANTE)")
            
            lotecart_validation = self._validate_lotecart_strict(lotecart_result)
            if not lotecart_validation["success"]:
                raise ValueError(f"VALIDATION LOTECART √âCHOU√âE: {lotecart_validation['issues']}")
            
            self.lotecart_validated = True
            logger.info("‚úÖ VALIDATION LOTECART R√âUSSIE - PASSAGE AUX AUTRES AJUSTEMENTS")
            
            # √âTAPE 3: Traitement des autres ajustements (apr√®s LOTECART valid√©)
            logger.info("üìç √âTAPE 3: TRAITEMENT DES AUTRES AJUSTEMENTS")
            
            other_adjustments = self._process_non_lotecart_adjustments(
                completed_df, original_df, lotecart_result["candidates"], strategy
            )
            
            # √âTAPE 4: Consolidation finale avec v√©rification coh√©rence
            logger.info("üìç √âTAPE 4: CONSOLIDATION FINALE AVEC V√âRIFICATION")
            
            final_result = self._consolidate_with_coherence_check(
                lotecart_result, other_adjustments, strategy
            )
            
            # Sauvegarder le r√©sum√© pour la g√©n√©ration du fichier final
            self.processing_summary = final_result
            
            logger.info("‚úÖ TRAITEMENT AVEC PRIORISATION STRICTE TERMIN√â")
            
            return final_result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement avec priorisation stricte: {e}", exc_info=True)
            raise
    
    def _process_lotecart_completely(
        self, 
        completed_df: pd.DataFrame, 
        original_df: pd.DataFrame
    ) -> Dict[str, Any]:
        """
        Traitement COMPLET des LOTECART avec toutes les v√©rifications
        """
        try:
            logger.info("üéØ TRAITEMENT COMPLET LOTECART - PHASE 1")
            
            # 1. D√©tection des candidats LOTECART
            lotecart_candidates = self.lotecart_processor.detect_lotecart_candidates(completed_df)
            
            if lotecart_candidates.empty:
                logger.info("‚ÑπÔ∏è Aucun candidat LOTECART d√©tect√©")
                return {
                    "candidates": lotecart_candidates,
                    "new_adjustments": [],
                    "existing_updates": [],
                    "summary": self.lotecart_processor._create_empty_summary()
                }
            
            logger.info(f"üéØ {len(lotecart_candidates)} candidats LOTECART d√©tect√©s")
            
            # 2. Cr√©ation des nouveaux ajustements LOTECART
            new_lotecart_adjustments = self.lotecart_processor.create_priority_lotecart_adjustments(
                lotecart_candidates, original_df
            )
            
            # 3. Mise √† jour des lignes existantes avec quantit√© th√©orique = 0
            existing_lotecart_updates = self.lotecart_processor.update_existing_lotecart_lines(
                original_df, completed_df
            )
            
            # 4. V√©rification de coh√©rence LOTECART
            coherence_check = self._verify_lotecart_coherence(
                lotecart_candidates, new_lotecart_adjustments, existing_lotecart_updates
            )
            
            if not coherence_check["success"]:
                raise ValueError(f"INCOH√âRENCE LOTECART: {coherence_check['issues']}")
            
            # 5. G√©n√©ration du r√©sum√© LOTECART
            lotecart_summary = self.lotecart_processor.get_lotecart_summary(
                lotecart_candidates, new_lotecart_adjustments + existing_lotecart_updates
            )
            
            result = {
                "candidates": lotecart_candidates,
                "new_adjustments": new_lotecart_adjustments,
                "existing_updates": existing_lotecart_updates,
                "summary": lotecart_summary,
                "coherence_check": coherence_check
            }
            
            logger.info(
                f"‚úÖ TRAITEMENT COMPLET LOTECART TERMIN√â: "
                f"{len(new_lotecart_adjustments)} nouveaux + "
                f"{len(existing_lotecart_updates)} mises √† jour = "
                f"{len(new_lotecart_adjustments) + len(existing_lotecart_updates)} LOTECART totaux"
            )
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement complet LOTECART: {e}", exc_info=True)
            raise
    
    def _verify_lotecart_coherence(
        self, 
        candidates: pd.DataFrame,
        new_adjustments: List[Dict[str, Any]],
        existing_updates: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        V√©rification stricte de coh√©rence LOTECART
        """
        coherence = {
            "success": False,
            "issues": [],
            "stats": {
                "candidates_count": len(candidates),
                "new_adjustments_count": len(new_adjustments),
                "existing_updates_count": len(existing_updates),
                "total_lotecart_count": len(new_adjustments) + len(existing_updates)
            }
        }
        
        try:
            # 1. V√©rifier que chaque candidat a un traitement
            candidates_articles = set()
            for _, candidate in candidates.iterrows():
                key = (
                    candidate["Code Article"],
                    candidate.get("Num√©ro Inventaire", ""),
                    str(candidate.get("Num√©ro Lot", "")).strip()
                )
                candidates_articles.add(key)
            
            # Articles trait√©s par nouveaux ajustements
            new_articles = set()
            for adj in new_adjustments:
                key = (
                    adj["CODE_ARTICLE"],
                    adj["NUMERO_INVENTAIRE"],
                    adj.get("metadata", {}).get("original_lot", "")
                )
                new_articles.add(key)
            
            # Articles trait√©s par mises √† jour existantes
            updated_articles = set()
            for update in existing_updates:
                key = (
                    update["CODE_ARTICLE"],
                    update["NUMERO_INVENTAIRE"],
                    update.get("metadata", {}).get("original_lot", "")
                )
                updated_articles.add(key)
            
            all_treated_articles = new_articles | updated_articles
            
            # V√©rifier la couverture
            missing_treatments = candidates_articles - all_treated_articles
            if missing_treatments:
                coherence["issues"].append(
                    f"Candidats LOTECART non trait√©s: {len(missing_treatments)} articles"
                )
                for article_key in list(missing_treatments)[:5]:  # Afficher max 5
                    coherence["issues"].append(f"  - {article_key[0]} (Inv: {article_key[1]})")
            
            # 2. V√©rifier les quantit√©s
            for adj in new_adjustments + existing_updates:
                if adj["QUANTITE_CORRIGEE"] <= 0:
                    coherence["issues"].append(
                        f"Quantit√© corrig√©e invalide pour {adj['CODE_ARTICLE']}: {adj['QUANTITE_CORRIGEE']}"
                    )
                
                if adj["QUANTITE_REELLE_SAISIE"] <= 0:
                    coherence["issues"].append(
                        f"Quantit√© saisie invalide pour {adj['CODE_ARTICLE']}: {adj['QUANTITE_REELLE_SAISIE']}"
                    )
                
                # Pour LOTECART: quantit√© corrig√©e DOIT √©galer quantit√© saisie
                if abs(adj["QUANTITE_CORRIGEE"] - adj["QUANTITE_REELLE_SAISIE"]) > 0.001:
                    coherence["issues"].append(
                        f"Incoh√©rence LOTECART {adj['CODE_ARTICLE']}: "
                        f"Corrig√©e={adj['QUANTITE_CORRIGEE']} ‚â† Saisie={adj['QUANTITE_REELLE_SAISIE']}"
                    )
            
            # 3. V√©rifier l'unicit√© des traitements
            all_keys = []
            for adj in new_adjustments + existing_updates:
                key = (adj["CODE_ARTICLE"], adj["NUMERO_INVENTAIRE"])
                all_keys.append(key)
            
            duplicate_keys = set([key for key in all_keys if all_keys.count(key) > 1])
            if duplicate_keys:
                coherence["issues"].append(
                    f"Traitements LOTECART dupliqu√©s pour: {len(duplicate_keys)} articles"
                )
            
            coherence["success"] = len(coherence["issues"]) == 0
            
            if coherence["success"]:
                logger.info("‚úÖ COH√âRENCE LOTECART V√âRIFI√âE")
            else:
                logger.error(f"‚ùå INCOH√âRENCES LOTECART D√âTECT√âES: {coherence['issues']}")
            
            return coherence
            
        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification coh√©rence LOTECART: {e}", exc_info=True)
            coherence["issues"].append(f"Erreur de v√©rification: {str(e)}")
            return coherence
    
    def _validate_lotecart_strict(self, lotecart_result: Dict[str, Any]) -> Dict[str, Any]:
        """
        Validation STRICTE et BLOCANTE des LOTECART
        """
        validation = {
            "success": False,
            "issues": [],
            "critical_errors": [],
            "warnings": []
        }
        
        try:
            candidates = lotecart_result["candidates"]
            new_adjustments = lotecart_result["new_adjustments"]
            existing_updates = lotecart_result["existing_updates"]
            coherence_check = lotecart_result["coherence_check"]
            
            # 1. V√©rifier la coh√©rence (d√©j√† calcul√©e)
            if not coherence_check["success"]:
                validation["critical_errors"].extend(coherence_check["issues"])
            
            # 2. V√©rifications suppl√©mentaires strictes
            total_candidates = len(candidates)
            total_treatments = len(new_adjustments) + len(existing_updates)
            
            if total_treatments < total_candidates:
                validation["critical_errors"].append(
                    f"Traitement incomplet: {total_treatments} traitements pour {total_candidates} candidats"
                )
            
            # 3. V√©rifier que tous les LOTECART ont les bonnes propri√©t√©s
            for adj in new_adjustments + existing_updates:
                # V√©rifications critiques
                if adj["TYPE_LOT"] != "lotecart":
                    validation["critical_errors"].append(
                        f"Type incorrect pour {adj['CODE_ARTICLE']}: {adj['TYPE_LOT']} (attendu: lotecart)"
                    )
                
                if adj["QUANTITE_ORIGINALE"] != 0:
                    validation["critical_errors"].append(
                        f"Quantit√© originale incorrecte pour LOTECART {adj['CODE_ARTICLE']}: {adj['QUANTITE_ORIGINALE']} (attendu: 0)"
                    )
                
                if not adj.get("is_priority_processed", False):
                    validation["warnings"].append(
                        f"Flag priorit√© manquant pour {adj['CODE_ARTICLE']}"
                    )
            
            # 4. Validation finale
            validation["success"] = len(validation["critical_errors"]) == 0
            
            if validation["success"]:
                logger.info(f"‚úÖ VALIDATION STRICTE LOTECART R√âUSSIE: {total_treatments} LOTECART valid√©s")
            else:
                logger.error(f"‚ùå VALIDATION STRICTE LOTECART √âCHOU√âE: {len(validation['critical_errors'])} erreurs critiques")
                for error in validation["critical_errors"]:
                    logger.error(f"   üî¥ {error}")
            
            return validation
            
        except Exception as e:
            logger.error(f"‚ùå Erreur validation stricte LOTECART: {e}", exc_info=True)
            validation["critical_errors"].append(f"Erreur de validation: {str(e)}")
            return validation
    
    def _process_non_lotecart_adjustments(
        self, 
        completed_df: pd.DataFrame, 
        original_df: pd.DataFrame,
        lotecart_candidates: pd.DataFrame,
        strategy: str
    ) -> List[Dict[str, Any]]:
        """
        Traite les ajustements non-LOTECART APR√àS validation LOTECART
        """
        try:
            if not self.lotecart_validated:
                raise ValueError("LOTECART non valid√©s - impossible de traiter les autres ajustements")
            
            logger.info("üîß TRAITEMENT DES AUTRES AJUSTEMENTS (POST-LOTECART)")
            
            # Calculer les √©carts en excluant strictement les LOTECART
            completed_clean = completed_df.copy()
            
            # Conversion des quantit√©s
            completed_clean["Quantit√© Th√©orique"] = pd.to_numeric(
                completed_clean["Quantit√© Th√©orique"], errors="coerce"
            ).fillna(0)
            completed_clean["Quantit√© R√©elle"] = pd.to_numeric(
                completed_clean["Quantit√© R√©elle"], errors="coerce"
            ).fillna(0)
            
            # Calculer les √©carts
            completed_clean["√âcart"] = (
                completed_clean["Quantit√© R√©elle"] - completed_clean["Quantit√© Th√©orique"]
            )
            
            # Exclure STRICTEMENT les LOTECART
            lotecart_exclusions = set()
            if not lotecart_candidates.empty:
                for _, candidate in lotecart_candidates.iterrows():
                    key = (
                        candidate["Code Article"],
                        candidate.get("Num√©ro Inventaire", ""),
                        str(candidate.get("Num√©ro Lot", "")).strip()
                    )
                    lotecart_exclusions.add(key)
                
                logger.info(f"üö´ Exclusion de {len(lotecart_exclusions)} articles LOTECART des autres ajustements")
            
            # Filtrer les √©carts non-LOTECART
            non_lotecart_discrepancies = []
            
            for _, row in completed_clean.iterrows():
                key = (
                    row["Code Article"],
                    row.get("Num√©ro Inventaire", ""),
                    str(row.get("Num√©ro Lot", "")).strip()
                )
                
                # Exclure si c'est un LOTECART
                if key in lotecart_exclusions:
                    continue
                
                # Exclure si pas d'√©cart
                if abs(row["√âcart"]) < 0.001:
                    continue
                
                non_lotecart_discrepancies.append(row)
            
            if not non_lotecart_discrepancies:
                logger.info("‚ÑπÔ∏è Aucun √©cart non-LOTECART √† traiter")
                return []
            
            logger.info(f"üîß Traitement de {len(non_lotecart_discrepancies)} √©carts non-LOTECART avec strat√©gie {strategy}")
            
            # Distribuer les √©carts selon la strat√©gie
            adjustments = []
            
            for discrepancy_row in non_lotecart_discrepancies:
                code_article = discrepancy_row["Code Article"]
                numero_inventaire = discrepancy_row.get("Num√©ro Inventaire", "")
                ecart = discrepancy_row["√âcart"]
                quantite_reelle_saisie = discrepancy_row["Quantit√© R√©elle"]
                quantite_theo_originale = discrepancy_row["Quantit√© Th√©orique"]
                
                # Trouver les lots pour cet article (excluant les LOTECART)
                article_lots = original_df[
                    (original_df["CODE_ARTICLE"] == code_article) &
                    (original_df["NUMERO_INVENTAIRE"] == numero_inventaire) &
                    (original_df["QUANTITE"] > 0)  # Exclure les lignes avec quantit√© = 0 (potentiels LOTECART)
                ].copy()
                
                if article_lots.empty:
                    logger.warning(f"‚ö†Ô∏è Aucun lot non-LOTECART trouv√© pour {code_article}")
                    continue
                
                # Trier selon la strat√©gie
                article_lots = self._sort_lots_by_strategy(article_lots, strategy)
                
                # Distribuer l'√©cart
                remaining_discrepancy = ecart
                
                for _, lot_row in article_lots.iterrows():
                    if abs(remaining_discrepancy) < 0.001:
                        break
                    
                    lot_quantity = float(lot_row["QUANTITE"])
                    lot_number = str(lot_row["NUMERO_LOT"]).strip() if lot_row["NUMERO_LOT"] else ""
                    
                    # Calculer l'ajustement
                    if remaining_discrepancy > 0:
                        adjustment = min(remaining_discrepancy, lot_quantity * 2)
                    else:
                        adjustment = max(remaining_discrepancy, -lot_quantity)
                    
                    if abs(adjustment) > 0.001:
                        adjustments.append({
                            "CODE_ARTICLE": code_article,
                            "NUMERO_INVENTAIRE": numero_inventaire,
                            "NUMERO_LOT": lot_number,
                            "TYPE_LOT": lot_row.get("Type_Lot", "unknown"),
                            "PRIORITY": 2,  # Priorit√© inf√©rieure aux LOTECART
                            "QUANTITE_ORIGINALE": lot_quantity,
                            "QUANTITE_REELLE_SAISIE": quantite_reelle_saisie,
                            "QUANTITE_CORRIGEE": lot_quantity + adjustment,
                            "AJUSTEMENT": adjustment,
                            "Date_Lot": lot_row.get("Date_Lot"),
                            "original_s_line_raw": lot_row.get("original_s_line_raw"),
                            "is_priority_processed": False,
                            "is_post_lotecart": True,  # Flag sp√©cial
                            "metadata": {
                                "processing_order": "AFTER_LOTECART_VALIDATION",
                                "strategy_used": strategy,
                                "quantite_theo_originale": lot_quantity,
                                "quantite_reelle_saisie": quantite_reelle_saisie,
                                "excluded_lotecart": True
                            }
                        })
                        
                        remaining_discrepancy -= adjustment
                        
                        logger.debug(
                            f"üîß Ajustement non-LOTECART: {code_article} "
                            f"(Lot: {lot_number}, Ajustement: {adjustment})"
                        )
            
            logger.info(f"‚úÖ {len(adjustments)} ajustements non-LOTECART cr√©√©s avec strat√©gie {strategy}")
            return adjustments
            
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement ajustements non-LOTECART: {e}", exc_info=True)
            return []
    
    def _sort_lots_by_strategy(self, lots_df: pd.DataFrame, strategy: str) -> pd.DataFrame:
        """Trie les lots selon la strat√©gie FIFO/LIFO"""
        try:
            if strategy == "FIFO":
                return lots_df.sort_values("Date_Lot", na_position="last")
            else:  # LIFO
                return lots_df.sort_values("Date_Lot", ascending=False, na_position="last")
        except Exception as e:
            logger.warning(f"Erreur tri lots: {e}")
            return lots_df
    
    def _consolidate_with_coherence_check(
        self, 
        lotecart_result: Dict[str, Any],
        other_adjustments: List[Dict[str, Any]],
        strategy: str
    ) -> Dict[str, Any]:
        """
        Consolidation finale avec v√©rification de coh√©rence globale
        """
        try:
            logger.info("üîó CONSOLIDATION FINALE AVEC V√âRIFICATION COH√âRENCE")
            
            # Extraire les donn√©es LOTECART
            lotecart_new = lotecart_result["new_adjustments"]
            lotecart_updates = lotecart_result["existing_updates"]
            lotecart_summary = lotecart_result["summary"]
            
            # Ordre de priorit√© strict: LOTECART d'abord, puis autres
            all_adjustments = []
            
            # 1. LOTECART prioritaires (nouvelles lignes) - PRIORIT√â 1
            all_adjustments.extend(lotecart_new)
            
            # 2. LOTECART mises √† jour (lignes existantes) - PRIORIT√â 1
            all_adjustments.extend(lotecart_updates)
            
            # 3. Autres ajustements - PRIORIT√â 2
            all_adjustments.extend(other_adjustments)
            
            # V√©rification finale de non-conflit
            conflicts = self._check_adjustment_conflicts(all_adjustments)
            if conflicts:
                raise ValueError(f"CONFLITS D√âTECT√âS DANS LES AJUSTEMENTS: {conflicts}")
            
            # Cr√©er le r√©sum√© global
            global_summary = self._create_comprehensive_summary(
                lotecart_summary, other_adjustments, all_adjustments, strategy
            )
            
            final_result = {
                "lotecart_candidates": lotecart_result["candidates"],
                "lotecart_new_adjustments": lotecart_new,
                "lotecart_existing_updates": lotecart_updates,
                "other_adjustments": other_adjustments,
                "all_adjustments": all_adjustments,
                "lotecart_summary": lotecart_summary,
                "global_summary": global_summary,
                "strategy_used": strategy,
                "processing_mode": "STRICT_PRIORITY_LOTECART_FIRST",
                "validation_status": "VALIDATED"
            }
            
            logger.info(
                f"üîó CONSOLIDATION TERMIN√âE: "
                f"{len(lotecart_new)} nouveaux LOTECART + "
                f"{len(lotecart_updates)} LOTECART mis √† jour + "
                f"{len(other_adjustments)} autres = "
                f"{len(all_adjustments)} ajustements totaux"
            )
            
            return final_result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur consolidation avec coh√©rence: {e}", exc_info=True)
            raise
    
    def _check_adjustment_conflicts(self, all_adjustments: List[Dict[str, Any]]) -> List[str]:
        """
        V√©rifie qu'il n'y a pas de conflits entre les ajustements
        """
        conflicts = []
        
        try:
            # Grouper par article + inventaire + lot
            adjustment_groups = {}
            
            for adj in all_adjustments:
                key = (
                    adj["CODE_ARTICLE"],
                    adj["NUMERO_INVENTAIRE"],
                    adj["NUMERO_LOT"]
                )
                
                if key not in adjustment_groups:
                    adjustment_groups[key] = []
                adjustment_groups[key].append(adj)
            
            # V√©rifier les conflits
            for key, adjustments_for_key in adjustment_groups.items():
                if len(adjustments_for_key) > 1:
                    # Conflit potentiel
                    types = [adj["TYPE_LOT"] for adj in adjustments_for_key]
                    priorities = [adj.get("PRIORITY", 999) for adj in adjustments_for_key]
                    
                    conflicts.append(
                        f"Conflit pour {key[0]} (Lot: {key[2]}): "
                        f"{len(adjustments_for_key)} ajustements (Types: {types}, Priorit√©s: {priorities})"
                    )
            
            return conflicts
            
        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification conflits: {e}")
            return [f"Erreur v√©rification conflits: {str(e)}"]
    
    def _create_comprehensive_summary(
        self, 
        lotecart_summary: Dict[str, Any],
        other_adjustments: List[Dict[str, Any]],
        all_adjustments: List[Dict[str, Any]],
        strategy: str
    ) -> Dict[str, Any]:
        """
        Cr√©e un r√©sum√© complet et d√©taill√© du traitement
        """
        try:
            total_lotecart = lotecart_summary.get("adjustments_created", 0)
            total_other = len(other_adjustments)
            total_adjustments = len(all_adjustments)
            
            # Calculer les quantit√©s totales
            total_lotecart_qty = lotecart_summary.get("total_quantity", 0)
            total_other_qty = sum(
                abs(adj.get("AJUSTEMENT", 0)) for adj in other_adjustments
            )
            total_qty = total_lotecart_qty + total_other_qty
            
            # Statistiques d√©taill√©es
            lotecart_stats = {
                "count": total_lotecart,
                "quantity": total_lotecart_qty,
                "percentage": (total_lotecart / total_adjustments * 100) if total_adjustments > 0 else 0,
                "validation_status": "VALIDATED" if self.lotecart_validated else "PENDING"
            }
            
            other_stats = {
                "count": total_other,
                "quantity": total_other_qty,
                "percentage": (total_other / total_adjustments * 100) if total_adjustments > 0 else 0,
                "strategy_used": strategy
            }
            
            # Indicateurs de qualit√©
            quality_indicators = {
                "lotecart_coverage": 100.0 if total_lotecart == lotecart_summary.get("candidates_detected", 0) else 0.0,
                "total_coverage": (total_adjustments / (total_adjustments + 1)) * 100,
                "processing_coherence": "STRICT_PRIORITY_MAINTAINED",
                "validation_passed": self.lotecart_validated
            }
            
            global_summary = {
                "processing_mode": "STRICT_PRIORITY_LOTECART_FIRST",
                "total_adjustments": total_adjustments,
                "total_quantity_adjusted": total_qty,
                "lotecart_stats": lotecart_stats,
                "other_stats": other_stats,
                "priority_order": ["LOTECART_PRIORITY_1", "OTHER_ADJUSTMENTS_PRIORITY_2"],
                "processing_timestamp": pd.Timestamp.now().isoformat(),
                "quality_indicators": quality_indicators,
                "strategy_used": strategy,
                "validation_status": "COMPLETE" if self.lotecart_validated else "INCOMPLETE"
            }
            
            logger.info(
                f"üìä R√âSUM√â COMPLET: "
                f"{total_lotecart} LOTECART (valid√©s) + {total_other} autres = {total_adjustments} ajustements totaux"
            )
            
            return global_summary
            
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation r√©sum√© complet: {e}", exc_info=True)
            return {}
    
    def generate_coherent_final_file(
        self, 
        session_id: str,
        original_df: pd.DataFrame,
        completed_df: pd.DataFrame,
        header_lines: List[str],
        output_path: str
    ) -> Tuple[str, Dict[str, Any]]:
        """
        G√©n√®re le fichier final avec coh√©rence GARANTIE
        
        LOGIQUE STRICTE:
        - Colonne F (QUANTITE): Quantit√© th√©orique corrig√©e
        - Colonne G (QUANTITE_REELLE_IN_INPUT): Quantit√© r√©elle saisie (tra√ßabilit√©)
        - Pour LOTECART: F = G = quantit√© saisie
        - Pour autres: F = quantit√© ajust√©e, G = quantit√© saisie
        """
        try:
            logger.info("üéØ G√âN√âRATION FICHIER FINAL AVEC COH√âRENCE GARANTIE")
            
            if not self.processing_summary:
                raise ValueError("Aucun traitement effectu√©. Appelez process_with_strict_priority() d'abord.")
            
            if not self.lotecart_validated:
                raise ValueError("LOTECART non valid√©s - g√©n√©ration fichier impossible")
            
            # R√©cup√©rer toutes les donn√©es de traitement
            lotecart_new = self.processing_summary["lotecart_new_adjustments"]
            lotecart_updates = self.processing_summary["lotecart_existing_updates"]
            other_adjustments = self.processing_summary["other_adjustments"]
            
            logger.info(
                f"üìã DONN√âES POUR G√âN√âRATION: "
                f"{len(lotecart_new)} nouveaux LOTECART, "
                f"{len(lotecart_updates)} LOTECART mis √† jour, "
                f"{len(other_adjustments)} autres ajustements"
            )
            
            # Cr√©er les dictionnaires de r√©f√©rence
            saisies_dict = self._create_saisies_reference(completed_df)
            adjustments_dict = self._create_adjustments_reference(
                lotecart_new, lotecart_updates, other_adjustments
            )
            
            # G√©n√©rer le contenu du fichier avec logique stricte
            lines = []
            lines.extend(header_lines)
            
            # Compteurs pour validation
            lines_processed = 0
            lotecart_lines_applied = 0
            other_lines_applied = 0
            
            # Traiter toutes les lignes originales
            for _, original_row in original_df.iterrows():
                if pd.notna(original_row["original_s_line_raw"]):
                    original_line = str(original_row["original_s_line_raw"])
                    parts = original_line.split(";")
                    
                    if len(parts) >= 15:
                        code_article = original_row["CODE_ARTICLE"]
                        numero_inventaire = original_row["NUMERO_INVENTAIRE"]
                        numero_lot_original = str(original_row["NUMERO_LOT"]).strip()
                        
                        # Cl√© pour recherche
                        key = (code_article, numero_inventaire, numero_lot_original)
                        
                        # R√©cup√©rer la quantit√© saisie (pour colonne G - tra√ßabilit√©)
                        quantite_saisie = saisies_dict.get(key, 0)
                        
                        # V√©rifier s'il y a un ajustement
                        if key in adjustments_dict:
                            adjustment = adjustments_dict[key]
                            
                            if adjustment["TYPE_LOT"] == "lotecart":
                                # LOGIQUE LOTECART STRICTE: F = G = quantit√© saisie
                                parts[5] = str(int(adjustment["QUANTITE_CORRIGEE"]))     # Colonne F
                                parts[6] = str(int(adjustment["QUANTITE_REELLE_SAISIE"])) # Colonne G
                                parts[7] = "2"                                           # Indicateur
                                parts[14] = "LOTECART"                                   # Num√©ro lot
                                lotecart_lines_applied += 1
                                
                                logger.debug(
                                    f"üéØ LOTECART APPLIQU√â: {code_article} - "
                                    f"F={parts[5]}, G={parts[6]}, Lot=LOTECART"
                                )
                            else:
                                # LOGIQUE AUTRES AJUSTEMENTS: F = quantit√© corrig√©e, G = quantit√© saisie
                                parts[5] = str(int(adjustment["QUANTITE_CORRIGEE"]))     # Colonne F (ajust√©e)
                                parts[6] = str(int(adjustment["QUANTITE_REELLE_SAISIE"])) # Colonne G (saisie)
                                other_lines_applied += 1
                                
                                logger.debug(
                                    f"üîß AUTRE AJUSTEMENT: {code_article} - "
                                    f"F={parts[5]}, G={parts[6]}"
                                )
                        else:
                            # LOGIQUE LIGNE STANDARD: F = quantit√© originale, G = quantit√© saisie
                            # parts[5] reste inchang√© (quantit√© th√©orique originale)
                            parts[6] = str(int(quantite_saisie)) if quantite_saisie > 0 else "0"  # Colonne G
                        
                        # Ajouter la ligne modifi√©e
                        lines.append(";".join(parts))
                        lines_processed += 1
            
            # Ajouter les nouvelles lignes LOTECART
            max_line_number = self._get_max_line_number(original_df)
            new_lotecart_lines = self._generate_new_lotecart_lines(
                lotecart_new, max_line_number
            )
            
            lines.extend(new_lotecart_lines)
            new_lotecart_count = len(new_lotecart_lines)
            
            # √âcrire le fichier avec encodage strict
            with open(output_path, "w", encoding="utf-8", newline="") as f:
                for line in lines:
                    f.write(line + "\n")
            
            # Validation finale du fichier g√©n√©r√©
            expected_lotecart_total = len(lotecart_new) + len(lotecart_updates)
            validation_result = self._validate_generated_file(
                output_path, expected_lotecart_total
            )
            
            # R√©sum√© de g√©n√©ration
            generation_summary = {
                "file_path": output_path,
                "total_lines_processed": lines_processed,
                "lotecart_lines_applied": lotecart_lines_applied,
                "other_lines_applied": other_lines_applied,
                "new_lotecart_lines": new_lotecart_count,
                "total_lotecart_lines": lotecart_lines_applied + new_lotecart_count,
                "validation": validation_result,
                "processing_mode": "STRICT_PRIORITY_COHERENT",
                "coherence_guaranteed": True
            }
            
            logger.info(
                f"‚úÖ FICHIER FINAL COH√âRENT G√âN√âR√â: {output_path} - "
                f"{lines_processed} lignes trait√©es, "
                f"{lotecart_lines_applied + new_lotecart_count} lignes LOTECART totales, "
                f"Validation: {'‚úÖ' if validation_result.get('success', False) else '‚ùå'}"
            )
            
            return output_path, generation_summary
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration fichier final coh√©rent: {e}", exc_info=True)
            raise
    
    def _create_saisies_reference(self, completed_df: pd.DataFrame) -> Dict[Tuple, float]:
        """Cr√©e le dictionnaire de r√©f√©rence des quantit√©s saisies"""
        saisies_dict = {}
        
        for _, row in completed_df.iterrows():
            key = (
                row["Code Article"], 
                row.get("Num√©ro Inventaire", ""), 
                str(row.get("Num√©ro Lot", "")).strip()
            )
            saisies_dict[key] = float(row["Quantit√© R√©elle"])
        
        logger.debug(f"üìã Dictionnaire saisies cr√©√©: {len(saisies_dict)} entr√©es")
        return saisies_dict
    
    def _create_adjustments_reference(
        self, 
        lotecart_new: List[Dict[str, Any]],
        lotecart_updates: List[Dict[str, Any]],
        other_adjustments: List[Dict[str, Any]]
    ) -> Dict[Tuple, Dict[str, Any]]:
        """Cr√©e le dictionnaire de r√©f√©rence des ajustements"""
        adjustments_dict = {}
        
        # 1. LOTECART nouveaux (priorit√© absolue)
        for adj in lotecart_new:
            key = (
                adj["CODE_ARTICLE"], 
                adj["NUMERO_INVENTAIRE"], 
                adj.get("metadata", {}).get("original_lot", "")
            )
            adjustments_dict[key] = adj
        
        # 2. LOTECART mises √† jour (priorit√© absolue)
        for adj in lotecart_updates:
            key = (
                adj["CODE_ARTICLE"], 
                adj["NUMERO_INVENTAIRE"], 
                adj.get("metadata", {}).get("original_lot", adj.get("NUMERO_LOT", ""))
            )
            adjustments_dict[key] = adj
        
        # 3. Autres ajustements (priorit√© inf√©rieure - ne pas √©craser LOTECART)
        for adj in other_adjustments:
            key = (
                adj["CODE_ARTICLE"], 
                adj["NUMERO_INVENTAIRE"], 
                adj["NUMERO_LOT"]
            )
            # Ne pas √©craser les LOTECART
            if key not in adjustments_dict:
                adjustments_dict[key] = adj
        
        logger.debug(f"üìã Dictionnaire ajustements cr√©√©: {len(adjustments_dict)} entr√©es")
        return adjustments_dict
    
    def _generate_new_lotecart_lines(
        self, 
        lotecart_new_adjustments: List[Dict[str, Any]], 
        max_line_number: int
    ) -> List[str]:
        """G√©n√®re les nouvelles lignes LOTECART avec num√©rotation coh√©rente"""
        new_lines = []
        
        try:
            current_line_number = max_line_number
            
            for adjustment in lotecart_new_adjustments:
                if not adjustment.get("is_new_lotecart", False):
                    continue
                
                reference_line = adjustment.get("reference_line")
                if not reference_line:
                    logger.warning(
                        f"‚ö†Ô∏è Pas de ligne de r√©f√©rence pour nouveau LOTECART {adjustment['CODE_ARTICLE']}"
                    )
                    continue
                
                parts = str(reference_line).split(";")
                if len(parts) < 15:
                    logger.warning(
                        f"‚ö†Ô∏è Ligne de r√©f√©rence invalide pour LOTECART {adjustment['CODE_ARTICLE']}"
                    )
                    continue
                
                # G√©n√©rer un nouveau num√©ro de ligne
                current_line_number += 1000
                
                # Construire la nouvelle ligne LOTECART
                new_parts = parts.copy()
                
                quantite_corrigee = int(adjustment["QUANTITE_CORRIGEE"])
                quantite_saisie = int(adjustment["QUANTITE_REELLE_SAISIE"])
                
                # LOGIQUE STRICTE LOTECART: F = G = quantit√© saisie
                new_parts[3] = str(current_line_number)  # RANG
                new_parts[5] = str(quantite_corrigee)    # QUANTITE (colonne F)
                new_parts[6] = str(quantite_saisie)      # QUANTITE_REELLE_IN_INPUT (colonne G)
                new_parts[7] = "2"                       # INDICATEUR_COMPTE
                new_parts[14] = "LOTECART"               # NUMERO_LOT
                
                new_line = ";".join(new_parts)
                new_lines.append(new_line)
                
                logger.debug(
                    f"‚úÖ NOUVELLE LIGNE LOTECART: {adjustment['CODE_ARTICLE']} "
                    f"(Ligne={current_line_number}, F={quantite_corrigee}, G={quantite_saisie})"
                )
            
            logger.info(f"üéØ {len(new_lines)} nouvelles lignes LOTECART g√©n√©r√©es")
            return new_lines
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration nouvelles lignes LOTECART: {e}", exc_info=True)
            return []
    
    def _validate_generated_file(
        self, 
        file_path: str, 
        expected_lotecart_count: int
    ) -> Dict[str, Any]:
        """
        Validation finale du fichier g√©n√©r√© avec v√©rifications strictes
        """
        validation = {
            "success": False,
            "lotecart_lines_found": 0,
            "lotecart_correct_indicators": 0,
            "lotecart_coherent_quantities": 0,
            "issues": [],
            "details": []
        }
        
        try:
            if not os.path.exists(file_path):
                validation["issues"].append("Fichier final non trouv√©")
                return validation
            
            logger.info(f"üîç VALIDATION FINALE STRICTE: {file_path}")
            
            # Analyser toutes les lignes LOTECART
            with open(file_path, 'r', encoding='utf-8') as f:
                for line_num, line in enumerate(f, 1):
                    line = line.strip()
                    if line.startswith('S;') and 'LOTECART' in line:
                        parts = line.split(';')
                        if len(parts) >= 15:
                            article = parts[8]
                            qty_f = parts[5]  # Colonne F
                            qty_g = parts[6]  # Colonne G
                            indicateur = parts[7]
                            
                            validation["lotecart_lines_found"] += 1
                            
                            # V√©rifier l'indicateur
                            if indicateur == '2':
                                validation["lotecart_correct_indicators"] += 1
                            else:
                                validation["issues"].append(
                                    f"Indicateur incorrect ligne {line_num}: {article} (indicateur={indicateur})"
                                )
                            
                            # V√©rifier la coh√©rence des quantit√©s (F = G pour LOTECART)
                            try:
                                qty_f_val = float(qty_f)
                                qty_g_val = float(qty_g)
                                
                                if abs(qty_f_val - qty_g_val) < 0.001 and qty_f_val > 0:
                                    validation["lotecart_coherent_quantities"] += 1
                                else:
                                    validation["issues"].append(
                                        f"Quantit√©s incoh√©rentes ligne {line_num}: {article} (F={qty_f}, G={qty_g})"
                                    )
                            except ValueError:
                                validation["issues"].append(
                                    f"Quantit√©s non num√©riques ligne {line_num}: {article}"
                                )
                            
                            # Ajouter aux d√©tails
                            validation["details"].append({
                                "line": line_num,
                                "article": article,
                                "qty_f": qty_f,
                                "qty_g": qty_g,
                                "indicator": indicateur,
                                "status": "‚úÖ" if indicateur == '2' and abs(float(qty_f) - float(qty_g)) < 0.001 else "‚ùå"
                            })
            
            # V√©rifications globales
            if validation["lotecart_lines_found"] < expected_lotecart_count:
                validation["issues"].append(
                    f"Nombre LOTECART insuffisant: {validation['lotecart_lines_found']} < {expected_lotecart_count}"
                )
            
            # Succ√®s si toutes les v√©rifications passent
            validation["success"] = (
                len(validation["issues"]) == 0 and
                validation["lotecart_correct_indicators"] == validation["lotecart_lines_found"] and
                validation["lotecart_coherent_quantities"] == validation["lotecart_lines_found"] and
                validation["lotecart_lines_found"] >= expected_lotecart_count
            )
            
            if validation["success"]:
                logger.info(
                    f"‚úÖ VALIDATION FINALE R√âUSSIE: "
                    f"{validation['lotecart_lines_found']} lignes LOTECART parfaitement coh√©rentes"
                )
            else:
                logger.error(
                    f"‚ùå VALIDATION FINALE √âCHOU√âE: "
                    f"{len(validation['issues'])} probl√®me(s) d√©tect√©(s)"
                )
                for issue in validation["issues"][:5]:  # Afficher max 5 probl√®mes
                    logger.error(f"   üî¥ {issue}")
            
            return validation
            
        except Exception as e:
            logger.error(f"‚ùå Erreur validation fichier g√©n√©r√©: {e}", exc_info=True)
            validation["issues"].append(f"Erreur de validation: {str(e)}")
            return validation
    
    def _get_max_line_number(self, original_df: pd.DataFrame) -> int:
        """R√©cup√®re le num√©ro de ligne maximum pour √©viter les conflits"""
        try:
            max_line = 0
            for _, row in original_df.iterrows():
                line_raw = str(row.get("original_s_line_raw", ""))
                parts = line_raw.split(";")
                if len(parts) > 3:
                    try:
                        line_num = int(parts[3])
                        max_line = max(max_line, line_num)
                    except (ValueError, IndexError):
                        pass
            return max_line
        except Exception as e:
            logger.warning(f"Erreur calcul num√©ro ligne max: {e}")
            return 0
    
    def get_processing_summary(self) -> Dict[str, Any]:
        """Retourne le r√©sum√© complet du traitement avec validation"""
        if not self.lotecart_validated:
            logger.warning("‚ö†Ô∏è LOTECART non valid√©s - r√©sum√© incomplet")
        
        return self.processing_summary.copy()
    
    def reset_processor(self):
        """Remet √† z√©ro le processeur avec validation"""
        self.lotecart_processor.reset_counter()
        self.processing_summary = {}
        self.lotecart_validated = False
        logger.info("üîÑ Processeur prioritaire remis √† z√©ro avec validation")

import os