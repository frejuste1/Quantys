import pandas as pd
import logging
from typing import Tuple, List, Dict, Any, Optional
import json

logger = logging.getLogger(__name__)

class LotecartProcessor:
    """
    Service sp√©cialis√© pour le traitement des lots LOTECART avec logique stricte
    
    LOTECART = Lot d'√©cart automatique cr√©√© quand:
    - Quantit√© Th√©orique = 0 (pas de stock pr√©vu)
    - Quantit√© R√©elle > 0 (stock trouv√© lors de l'inventaire)
    
    R√àGLES STRICTES:
    - Traitement en priorit√© absolue
    - Quantit√© corrig√©e = Quantit√© saisie
    - Indicateur toujours = 2
    - Num√©ro lot = "LOTECART"
    """
    
    def __init__(self):
        self.lotecart_counter = 0
        self.processed_lotecart = []
    
    def detect_lotecart_candidates(self, completed_df: pd.DataFrame) -> pd.DataFrame:
        """
        D√©tecte les candidats LOTECART avec validation stricte
        
        Args:
            completed_df: DataFrame du template compl√©t√© avec quantit√©s r√©elles
            
        Returns:
            DataFrame contenant uniquement les candidats LOTECART valid√©s
        """
        try:
            if completed_df.empty:
                logger.warning("DataFrame compl√©t√© vide pour d√©tection LOTECART")
                return pd.DataFrame()
            
            logger.info("üîç D√âTECTION STRICTE DES CANDIDATS LOTECART")
            
            # Nettoyer et valider les donn√©es
            df_clean = completed_df.copy()
            
            # Validation et conversion des colonnes critiques
            required_columns = ["Code Article", "Quantit√© Th√©orique", "Quantit√© R√©elle"]
            missing_columns = [col for col in required_columns if col not in df_clean.columns]
            
            if missing_columns:
                raise ValueError(f"Colonnes manquantes pour d√©tection LOTECART: {missing_columns}")
            
            # Conversion s√©curis√©e des quantit√©s avec validation
            df_clean["Quantit√© Th√©orique"] = pd.to_numeric(
                df_clean["Quantit√© Th√©orique"], errors="coerce"
            )
            df_clean["Quantit√© R√©elle"] = pd.to_numeric(
                df_clean["Quantit√© R√©elle"], errors="coerce"
            )
            
            # V√©rifier les conversions
            invalid_theo = df_clean["Quantit√© Th√©orique"].isna().sum()
            invalid_real = df_clean["Quantit√© R√©elle"].isna().sum()
            
            if invalid_theo > 0 or invalid_real > 0:
                logger.warning(
                    f"‚ö†Ô∏è Quantit√©s invalides d√©tect√©es: {invalid_theo} th√©oriques, {invalid_real} r√©elles"
                )
                # Remplacer les NaN par 0 pour continuer
                df_clean["Quantit√© Th√©orique"] = df_clean["Quantit√© Th√©orique"].fillna(0)
                df_clean["Quantit√© R√©elle"] = df_clean["Quantit√© R√©elle"].fillna(0)
            
            # CRIT√àRE STRICT LOTECART: Qt√© Th√©orique = 0 ET Qt√© R√©elle > 0
            lotecart_mask = (
                (df_clean["Quantit√© Th√©orique"] == 0) & 
                (df_clean["Quantit√© R√©elle"] > 0)
            )
            
            lotecart_candidates = df_clean[lotecart_mask].copy()
            
            if not lotecart_candidates.empty:
                # Enrichir les candidats avec m√©tadonn√©es LOTECART
                lotecart_candidates["Type_Lot"] = "lotecart"
                lotecart_candidates["√âcart"] = lotecart_candidates["Quantit√© R√©elle"]
                lotecart_candidates["Is_Lotecart"] = True
                lotecart_candidates["Priority"] = 1  # Priorit√© maximale
                lotecart_candidates["Detection_Timestamp"] = pd.Timestamp.now()
                
                # Validation suppl√©mentaire des candidats
                for _, candidate in lotecart_candidates.iterrows():
                    if candidate["Quantit√© R√©elle"] <= 0:
                        logger.error(
                            f"‚ùå CANDIDAT LOTECART INVALIDE: {candidate['Code Article']} "
                            f"- Quantit√© r√©elle <= 0: {candidate['Quantit√© R√©elle']}"
                        )
                        raise ValueError(f"Candidat LOTECART invalide: {candidate['Code Article']}")
                
                logger.info(f"üéØ {len(lotecart_candidates)} candidats LOTECART VALID√âS d√©tect√©s")
                
                # Log d√©taill√© pour tra√ßabilit√© compl√®te
                for _, row in lotecart_candidates.iterrows():
                    logger.info(
                        f"   üì¶ CANDIDAT LOTECART VALID√â: {row['Code Article']} "
                        f"(Inv: {row.get('Num√©ro Inventaire', 'N/A')}) - "
                        f"Qt√© Th√©o=0 ‚Üí Qt√© R√©elle={row['Quantit√© R√©elle']} "
                        f"(Lot original: '{row.get('Num√©ro Lot', '')}')"
                    )
            else:
                logger.info("‚ÑπÔ∏è Aucun candidat LOTECART d√©tect√©")
            
            return lotecart_candidates
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©tection candidats LOTECART: {e}", exc_info=True)
            return pd.DataFrame()
    
    def create_priority_lotecart_adjustments(
        self, 
        lotecart_candidates: pd.DataFrame, 
        original_df: pd.DataFrame
    ) -> List[Dict[str, Any]]:
        """
        Cr√©e les ajustements LOTECART avec logique stricte et priorit√© absolue
        """
        adjustments = []
        
        try:
            if lotecart_candidates.empty:
                logger.info("‚ÑπÔ∏è Aucun candidat LOTECART √† traiter")
                return adjustments
            
            logger.info(f"üî• CR√âATION AJUSTEMENTS LOTECART PRIORITAIRES: {len(lotecart_candidates)} candidats")
            
            for _, candidate in lotecart_candidates.iterrows():
                code_article = candidate["Code Article"]
                numero_inventaire = candidate.get("Num√©ro Inventaire", "")
                quantite_reelle_saisie = float(candidate["Quantit√© R√©elle"])
                numero_lot_original = str(candidate.get("Num√©ro Lot", "")).strip()
                
                # Validation stricte du candidat
                if quantite_reelle_saisie <= 0:
                    logger.error(f"‚ùå CANDIDAT INVALIDE: {code_article} - Quantit√© saisie <= 0")
                    continue
                
                # Trouver la ligne de r√©f√©rence dans les donn√©es originales
                reference_query = (
                    (original_df["CODE_ARTICLE"] == code_article) &
                    (original_df["NUMERO_INVENTAIRE"] == numero_inventaire)
                )
                
                # Si le candidat a un lot original, chercher cette ligne sp√©cifique
                if numero_lot_original:
                    specific_query = reference_query & (
                        original_df["NUMERO_LOT"].astype(str).str.strip() == numero_lot_original
                    )
                    specific_lots = original_df[specific_query]
                    
                    if not specific_lots.empty:
                        reference_lots = specific_lots
                    else:
                        # Fallback sur toutes les lignes de l'article
                        reference_lots = original_df[reference_query]
                else:
                    reference_lots = original_df[reference_query]
                
                if reference_lots.empty:
                    logger.error(
                        f"‚ùå AUCUNE LIGNE DE R√âF√âRENCE pour LOTECART: {code_article} "
                        f"(Inv: {numero_inventaire}, Lot original: '{numero_lot_original}')"
                    )
                    continue
                
                # Prendre la ligne avec quantit√© = 0 en priorit√©, sinon la premi√®re
                zero_qty_lots = reference_lots[reference_lots["QUANTITE"] == 0]
                ref_lot = zero_qty_lots.iloc[0] if not zero_qty_lots.empty else reference_lots.iloc[0]
                
                # Cr√©er l'ajustement LOTECART avec logique stricte
                adjustment = {
                    "CODE_ARTICLE": code_article,
                    "NUMERO_INVENTAIRE": numero_inventaire,
                    "NUMERO_LOT": "LOTECART",  # Toujours LOTECART
                    "TYPE_LOT": "lotecart",
                    "PRIORITY": 1,  # Priorit√© maximale
                    "QUANTITE_ORIGINALE": 0,  # Toujours 0 pour LOTECART
                    "QUANTITE_REELLE_SAISIE": quantite_reelle_saisie,  # Quantit√© saisie (colonne G)
                    "QUANTITE_CORRIGEE": quantite_reelle_saisie,       # Quantit√© corrig√©e = saisie (colonne F)
                    "AJUSTEMENT": quantite_reelle_saisie,              # √âcart = quantit√© saisie
                    "Date_Lot": None,  # Pas de date pour LOTECART
                    "original_s_line_raw": ref_lot.get("original_s_line_raw"),
                    "reference_line": ref_lot.get("original_s_line_raw"),
                    "is_new_lotecart": True,  # Flag nouveau LOTECART
                    "is_priority_processed": True,  # Flag priorit√©
                    "is_coherent": True,  # Flag coh√©rence
                    # M√©tadonn√©es compl√®tes pour tra√ßabilit√©
                    "metadata": {
                        "detection_reason": "qty_theo_0_qty_real_positive",
                        "original_lot": numero_lot_original,
                        "reference_site": ref_lot.get("SITE", ""),
                        "reference_emplacement": ref_lot.get("EMPLACEMENT", ""),
                        "reference_zone": ref_lot.get("ZONE_PK", ""),
                        "processing_priority": "LOTECART_ABSOLUTE_FIRST",
                        "quantite_theo_originale": 0,
                        "quantite_reelle_saisie": quantite_reelle_saisie,
                        "coherence_rule": "F_EQUALS_G_FOR_LOTECART",
                        "validation_timestamp": pd.Timestamp.now().isoformat()
                    }
                }
                
                adjustments.append(adjustment)
                
                logger.info(
                    f"‚úÖ AJUSTEMENT LOTECART PRIORITAIRE CR√â√â: {code_article} "
                    f"(Qt√© Saisie={quantite_reelle_saisie}, Qt√© Corrig√©e={quantite_reelle_saisie}, "
                    f"Lot original: '{numero_lot_original}' ‚Üí 'LOTECART')"
                )
            
            logger.info(f"üéØ {len(adjustments)} ajustements LOTECART PRIORITAIRES cr√©√©s avec succ√®s")
            return adjustments
            
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation ajustements LOTECART prioritaires: {e}", exc_info=True)
            return []
    
    def update_existing_lotecart_lines(
        self, 
        original_df: pd.DataFrame, 
        completed_df: pd.DataFrame
    ) -> List[Dict[str, Any]]:
        """
        Met √† jour les lignes existantes avec quantit√© th√©orique = 0 et quantit√© r√©elle > 0
        """
        updates = []
        
        try:
            logger.info("üîÑ MISE √Ä JOUR DES LIGNES EXISTANTES LOTECART")
            
            # Cr√©er un dictionnaire des quantit√©s saisies
            saisies_dict = {}
            for _, row in completed_df.iterrows():
                key = (
                    row["Code Article"], 
                    row.get("Num√©ro Inventaire", ""), 
                    str(row.get("Num√©ro Lot", "")).strip()
                )
                saisies_dict[key] = float(row["Quantit√© R√©elle"])
            
            # Identifier les lignes originales avec quantit√© th√©orique = 0
            zero_qty_lines = original_df[original_df["QUANTITE"] == 0].copy()
            
            if zero_qty_lines.empty:
                logger.info("‚ÑπÔ∏è Aucune ligne existante avec quantit√© th√©orique = 0")
                return updates
            
            logger.info(f"üîç Analyse de {len(zero_qty_lines)} lignes existantes avec quantit√© th√©orique = 0")
            
            for _, line in zero_qty_lines.iterrows():
                code_article = line["CODE_ARTICLE"]
                numero_inventaire = line.get("NUMERO_INVENTAIRE", "")
                numero_lot_original = str(line.get("NUMERO_LOT", "")).strip()
                
                key = (code_article, numero_inventaire, numero_lot_original)
                quantite_saisie = saisies_dict.get(key, 0)
                
                # V√©rifier si cette ligne doit devenir LOTECART
                if quantite_saisie > 0:
                    # Validation stricte
                    if quantite_saisie <= 0:
                        logger.error(f"‚ùå QUANTIT√â SAISIE INVALIDE pour {code_article}: {quantite_saisie}")
                        continue
                    
                    # Cr√©er la mise √† jour LOTECART
                    update = {
                        "CODE_ARTICLE": code_article,
                        "NUMERO_INVENTAIRE": numero_inventaire,
                        "NUMERO_LOT": "LOTECART",  # Forcer LOTECART
                        "TYPE_LOT": "lotecart",
                        "PRIORITY": 1,  # Priorit√© maximale
                        "QUANTITE_ORIGINALE": 0,  # Toujours 0
                        "QUANTITE_REELLE_SAISIE": quantite_saisie,  # Quantit√© saisie (colonne G)
                        "QUANTITE_CORRIGEE": quantite_saisie,       # Quantit√© corrig√©e = saisie (colonne F)
                        "AJUSTEMENT": quantite_saisie,              # √âcart = quantit√© saisie
                        "Date_Lot": line.get("Date_Lot"),
                        "original_s_line_raw": line.get("original_s_line_raw"),
                        "is_existing_line_update": True,  # Flag ligne existante
                        "is_priority_processed": True,    # Flag priorit√©
                        "is_coherent": True,              # Flag coh√©rence
                        "metadata": {
                            "update_reason": "existing_zero_qty_with_real_qty",
                            "original_lot": numero_lot_original,
                            "quantite_theo_originale": 0,
                            "quantite_reelle_saisie": quantite_saisie,
                            "coherence_rule": "F_EQUALS_G_FOR_LOTECART",
                            "processing_priority": "LOTECART_EXISTING_UPDATE",
                            "validation_timestamp": pd.Timestamp.now().isoformat()
                        }
                    }
                    
                    updates.append(update)
                    
                    logger.info(
                        f"‚úÖ MISE √Ä JOUR LOTECART EXISTANTE: {code_article} "
                        f"(Lot original: '{numero_lot_original}' ‚Üí 'LOTECART', "
                        f"Qt√© saisie: {quantite_saisie})"
                    )
                else:
                    logger.debug(
                        f"‚ÑπÔ∏è Ligne avec qt√© th√©o=0 mais qt√© r√©elle=0: {code_article} "
                        f"(pas de traitement LOTECART n√©cessaire)"
                    )
            
            logger.info(f"üéØ {len(updates)} mises √† jour LOTECART pour lignes existantes")
            return updates
            
        except Exception as e:
            logger.error(f"‚ùå Erreur mise √† jour lignes LOTECART existantes: {e}", exc_info=True)
            return []
    
    def validate_lotecart_processing(
        self, 
        final_file_path: str, 
        expected_lotecart_count: int
    ) -> Dict[str, Any]:
        """
        Validation finale stricte du traitement LOTECART dans le fichier g√©n√©r√©
        """
        validation_result = {
            "success": False,
            "lotecart_lines_found": 0,
            "correct_indicators": 0,
            "coherent_quantities": 0,
            "issues": [],
            "details": [],
            "critical_errors": []
        }
        
        try:
            if not final_file_path or not os.path.exists(final_file_path):
                validation_result["critical_errors"].append("Fichier final non trouv√©")
                return validation_result
            
            logger.info(f"üîç VALIDATION FINALE STRICTE LOTECART: {final_file_path}")
            
            # Analyser toutes les lignes LOTECART
            with open(final_file_path, 'r', encoding='utf-8') as f:
                for line_num, line in enumerate(f, 1):
                    line = line.strip()
                    if line.startswith('S;') and 'LOTECART' in line:
                        parts = line.split(';')
                        if len(parts) >= 15:
                            article = parts[8]
                            qty_f = parts[5]  # Colonne F (quantit√© th√©orique corrig√©e)
                            qty_g = parts[6]  # Colonne G (quantit√© r√©elle saisie)
                            indicateur = parts[7]
                            lot = parts[14]
                            
                            validation_result["lotecart_lines_found"] += 1
                            
                            # Validation stricte de l'indicateur
                            if indicateur == '2':
                                validation_result["correct_indicators"] += 1
                            else:
                                validation_result["critical_errors"].append(
                                    f"INDICATEUR INCORRECT ligne {line_num}: {article} "
                                    f"(indicateur={indicateur}, attendu=2)"
                                )
                            
                            # Validation stricte des quantit√©s (F DOIT √©galer G pour LOTECART)
                            try:
                                qty_f_val = float(qty_f)
                                qty_g_val = float(qty_g)
                                
                                if abs(qty_f_val - qty_g_val) < 0.001 and qty_f_val > 0 and qty_g_val > 0:
                                    validation_result["coherent_quantities"] += 1
                                else:
                                    validation_result["critical_errors"].append(
                                        f"QUANTIT√âS INCOH√âRENTES ligne {line_num}: {article} "
                                        f"(F={qty_f}, G={qty_g}) - DOIT √™tre F=G>0 pour LOTECART"
                                    )
                            except ValueError:
                                validation_result["critical_errors"].append(
                                    f"QUANTIT√âS NON NUM√âRIQUES ligne {line_num}: {article} (F={qty_f}, G={qty_g})"
                                )
                            
                            # Validation du num√©ro de lot
                            if lot != "LOTECART":
                                validation_result["critical_errors"].append(
                                    f"NUM√âRO LOT INCORRECT ligne {line_num}: {article} "
                                    f"(lot={lot}, attendu=LOTECART)"
                                )
                            
                            # Ajouter aux d√©tails
                            validation_result["details"].append({
                                "line": line_num,
                                "article": article,
                                "qty_f": qty_f,
                                "qty_g": qty_g,
                                "indicator": indicateur,
                                "lot": lot,
                                "status": "‚úÖ" if (
                                    indicateur == '2' and 
                                    abs(float(qty_f) - float(qty_g)) < 0.001 and 
                                    float(qty_f) > 0 and
                                    lot == "LOTECART"
                                ) else "‚ùå"
                            })
            
            # V√©rifications globales strictes
            if validation_result["lotecart_lines_found"] < expected_lotecart_count:
                validation_result["critical_errors"].append(
                    f"NOMBRE LOTECART INSUFFISANT: {validation_result['lotecart_lines_found']} < {expected_lotecart_count}"
                )
            
            if validation_result["correct_indicators"] < validation_result["lotecart_lines_found"]:
                validation_result["critical_errors"].append(
                    f"INDICATEURS INCORRECTS: {validation_result['correct_indicators']}/{validation_result['lotecart_lines_found']}"
                )
            
            if validation_result["coherent_quantities"] < validation_result["lotecart_lines_found"]:
                validation_result["critical_errors"].append(
                    f"QUANTIT√âS INCOH√âRENTES: {validation_result['coherent_quantities']}/{validation_result['lotecart_lines_found']}"
                )
            
            # Succ√®s STRICT: toutes les v√©rifications doivent passer
            validation_result["success"] = (
                len(validation_result["critical_errors"]) == 0 and
                validation_result["correct_indicators"] == validation_result["lotecart_lines_found"] and
                validation_result["coherent_quantities"] == validation_result["lotecart_lines_found"] and
                validation_result["lotecart_lines_found"] >= expected_lotecart_count
            )
            
            if validation_result["success"]:
                logger.info(
                    f"‚úÖ VALIDATION FINALE LOTECART STRICTE R√âUSSIE: "
                    f"{validation_result['lotecart_lines_found']} lignes LOTECART parfaitement coh√©rentes"
                )
            else:
                logger.error(
                    f"‚ùå VALIDATION FINALE LOTECART STRICTE √âCHOU√âE: "
                    f"{len(validation_result['critical_errors'])} erreur(s) critique(s)"
                )
                for error in validation_result["critical_errors"][:10]:  # Afficher max 10 erreurs
                    logger.error(f"   üî¥ {error}")
            
            return validation_result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur validation finale LOTECART: {e}", exc_info=True)
            validation_result["critical_errors"].append(f"Erreur de validation: {str(e)}")
            return validation_result
    
    def get_lotecart_summary(
        self, 
        lotecart_candidates: pd.DataFrame,
        lotecart_adjustments: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        G√©n√®re un r√©sum√© d√©taill√© et valid√© du traitement LOTECART
        """
        try:
            total_quantity = 0
            articles_by_inventory = {}
            priority_stats = {"new_lines": 0, "updated_lines": 0}
            validation_stats = {"coherent_adjustments": 0, "total_adjustments": len(lotecart_adjustments)}
            
            if not lotecart_candidates.empty:
                total_quantity = float(lotecart_candidates["Quantit√© R√©elle"].sum())
                
                # Grouper par inventaire
                for _, row in lotecart_candidates.iterrows():
                    inv = row.get("Num√©ro Inventaire", "N/A")
                    if inv not in articles_by_inventory:
                        articles_by_inventory[inv] = []
                    
                    articles_by_inventory[inv].append({
                        "article": row["Code Article"],
                        "quantity": float(row["Quantit√© R√©elle"]),
                        "lot_original": str(row.get("Num√©ro Lot", "")).strip()
                    })
            
            # Analyser les types d'ajustements et leur coh√©rence
            for adj in lotecart_adjustments:
                if adj.get("is_new_lotecart", False):
                    priority_stats["new_lines"] += 1
                elif adj.get("is_existing_line_update", False):
                    priority_stats["updated_lines"] += 1
                
                # V√©rifier la coh√©rence de l'ajustement
                if adj.get("is_coherent", False):
                    validation_stats["coherent_adjustments"] += 1
            
            # Calcul du score de qualit√©
            quality_score = 0
            if validation_stats["total_adjustments"] > 0:
                quality_score = (validation_stats["coherent_adjustments"] / validation_stats["total_adjustments"]) * 100
            
            summary = {
                "candidates_detected": len(lotecart_candidates),
                "adjustments_created": len(lotecart_adjustments),
                "total_quantity": total_quantity,
                "inventories_affected": len(articles_by_inventory),
                "articles_by_inventory": articles_by_inventory,
                "priority_stats": priority_stats,
                "validation_stats": validation_stats,
                "quality_score": quality_score,
                "processing_timestamp": pd.Timestamp.now().isoformat(),
                "processing_mode": "STRICT_PRIORITY_LOTECART",
                "validation_status": "VALIDATED" if quality_score == 100 else "PARTIAL",
                "coherence_guaranteed": quality_score == 100
            }
            
            logger.info(
                f"üìä R√âSUM√â LOTECART STRICT: "
                f"{summary['candidates_detected']} candidats, "
                f"{summary['adjustments_created']} ajustements, "
                f"{total_quantity} unit√©s, "
                f"Score qualit√©: {quality_score:.1f}%"
            )
            
            return summary
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration r√©sum√© LOTECART: {e}", exc_info=True)
            return {
                "candidates_detected": 0,
                "adjustments_created": 0,
                "total_quantity": 0,
                "inventories_affected": 0,
                "articles_by_inventory": {},
                "priority_stats": {"new_lines": 0, "updated_lines": 0},
                "validation_stats": {"coherent_adjustments": 0, "total_adjustments": 0},
                "quality_score": 0,
                "error": str(e),
                "processing_mode": "STRICT_PRIORITY_LOTECART",
                "validation_status": "ERROR"
            }
    
    def _create_empty_summary(self) -> Dict[str, Any]:
        """Cr√©e un r√©sum√© vide pour les cas sans LOTECART"""
        return {
            "candidates_detected": 0,
            "adjustments_created": 0,
            "total_quantity": 0,
            "inventories_affected": 0,
            "articles_by_inventory": {},
            "priority_stats": {"new_lines": 0, "updated_lines": 0},
            "validation_stats": {"coherent_adjustments": 0, "total_adjustments": 0},
            "quality_score": 100,  # 100% car pas de LOTECART √† traiter
            "processing_timestamp": pd.Timestamp.now().isoformat(),
            "processing_mode": "STRICT_PRIORITY_LOTECART",
            "validation_status": "NO_LOTECART_DETECTED"
        }
    
    def reset_counter(self):
        """Remet √† z√©ro le compteur LOTECART"""
        self.lotecart_counter = 0
        self.processed_lotecart = []
        logger.debug("üîÑ Compteur et historique LOTECART remis √† z√©ro")