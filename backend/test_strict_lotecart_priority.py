#!/usr/bin/env python3
"""
Test complet du traitement STRICT PRIORITAIRE LOTECART
V√©rifie que les incoh√©rences sont d√©finitivement r√©solues
"""
import sys
import os
sys.path.append('.')

import pandas as pd
import tempfile
from datetime import datetime
from services.priority_processor import PriorityProcessor
from services.lotecart_processor import LotecartProcessor

def create_comprehensive_test_data():
    """Cr√©e des donn√©es de test compl√®tes pour v√©rifier le traitement strict"""
    
    # 1. DataFrame original (donn√©es Sage X3 brutes)
    original_data = {
        'TYPE_LIGNE': ['S', 'S', 'S', 'S', 'S', 'S'],
        'NUMERO_SESSION': ['SESSION001'] * 6,
        'NUMERO_INVENTAIRE': ['INV001'] * 6,
        'RANG': [1000, 1001, 1002, 1003, 1004, 1005],
        'SITE': ['SITE01'] * 6,
        'QUANTITE': [100.0, 50.0, 0.0, 75.0, 0.0, 25.0],  # ART003 et ART005 = candidats LOTECART
        'QUANTITE_REELLE_IN_INPUT': [0.0] * 6,
        'INDICATEUR_COMPTE': [1] * 6,
        'CODE_ARTICLE': ['ART001', 'ART002', 'ART003', 'ART004', 'ART005', 'ART006'],
        'EMPLACEMENT': ['EMP001'] * 6,
        'STATUT': ['A'] * 6,
        'UNITE': ['UN'] * 6,
        'VALEUR': [0.0] * 6,
        'ZONE_PK': ['ZONE1'] * 6,
        'NUMERO_LOT': ['LOT001', 'LOT002', '', 'LOT004', '', 'LOT006'],
        'original_s_line_raw': [
            'S;SESSION001;INV001;1000;SITE01;100;0;1;ART001;EMP001;A;UN;0;ZONE1;LOT001',
            'S;SESSION001;INV001;1001;SITE01;50;0;1;ART002;EMP001;A;UN;0;ZONE1;LOT002',
            'S;SESSION001;INV001;1002;SITE01;0;0;1;ART003;EMP001;A;UN;0;ZONE1;',
            'S;SESSION001;INV001;1003;SITE01;75;0;1;ART004;EMP001;A;UN;0;ZONE1;LOT004',
            'S;SESSION001;INV001;1004;SITE01;0;0;1;ART005;EMP001;A;UN;0;ZONE1;',
            'S;SESSION001;INV001;1005;SITE01;25;0;1;ART006;EMP001;A;UN;0;ZONE1;LOT006'
        ]
    }
    original_df = pd.DataFrame(original_data)
    
    # 2. DataFrame compl√©t√© (template avec quantit√©s r√©elles saisies)
    completed_data = {
        'Num√©ro Session': ['SESSION001'] * 6,
        'Num√©ro Inventaire': ['INV001'] * 6,
        'Code Article': ['ART001', 'ART002', 'ART003', 'ART004', 'ART005', 'ART006'],
        'Quantit√© Th√©orique': [100, 50, 0, 75, 0, 25],     # ART003 et ART005 ont qt√© th√©o = 0
        'Quantit√© R√©elle': [95, 55, 15, 70, 8, 25],        # ART003 et ART005 ont qt√© r√©elle > 0 = LOTECART
        'Num√©ro Lot': ['LOT001', 'LOT002', '', 'LOT004', '', 'LOT006']
    }
    completed_df = pd.DataFrame(completed_data)
    
    return original_df, completed_df

def test_strict_lotecart_priority():
    """Test du traitement strict prioritaire LOTECART"""
    print("üß™ TEST TRAITEMENT STRICT PRIORITAIRE LOTECART")
    print("=" * 80)
    print("Objectif: R√©soudre d√©finitivement les incoh√©rences LOTECART")
    print("M√©thode: Traitement prioritaire strict avec validation blocante")
    print("=" * 80)
    
    try:
        # 1. Cr√©er les donn√©es de test
        print("\nüìã 1. CR√âATION DES DONN√âES DE TEST")
        original_df, completed_df = create_comprehensive_test_data()
        
        print(f"   ‚úÖ {len(original_df)} lignes originales cr√©√©es")
        print(f"   ‚úÖ {len(completed_df)} lignes dans le template compl√©t√©")
        
        # Afficher les candidats LOTECART attendus
        expected_lotecart = completed_df[
            (completed_df['Quantit√© Th√©orique'] == 0) & 
            (completed_df['Quantit√© R√©elle'] > 0)
        ]
        print(f"   üéØ {len(expected_lotecart)} candidats LOTECART attendus:")
        for _, row in expected_lotecart.iterrows():
            print(f"      - {row['Code Article']}: Qt√© Th√©o=0, Qt√© R√©elle={row['Quantit√© R√©elle']}")
        
        # 2. Initialiser le processeur prioritaire strict
        print("\nüîß 2. INITIALISATION DU PROCESSEUR PRIORITAIRE STRICT")
        priority_processor = PriorityProcessor()
        
        # 3. Traitement avec priorisation stricte
        print("\nüöÄ 3. TRAITEMENT AVEC PRIORISATION STRICTE")
        processing_result = priority_processor.process_with_strict_priority(
            completed_df, original_df, strategy="FIFO"
        )
        
        # 4. V√©rification des r√©sultats LOTECART
        print("\nüîç 4. V√âRIFICATION DES R√âSULTATS LOTECART")
        
        lotecart_summary = processing_result["lotecart_summary"]
        lotecart_new = processing_result["lotecart_new_adjustments"]
        lotecart_updates = processing_result["lotecart_existing_updates"]
        
        print(f"   üìä Candidats d√©tect√©s: {lotecart_summary['candidates_detected']}")
        print(f"   üìä Ajustements cr√©√©s: {lotecart_summary['adjustments_created']}")
        print(f"   üìä Nouveaux LOTECART: {len(lotecart_new)}")
        print(f"   üìä LOTECART mis √† jour: {len(lotecart_updates)}")
        print(f"   üìä Score qualit√©: {lotecart_summary['quality_score']:.1f}%")
        
        # V√©rifier chaque ajustement LOTECART
        print("\n   üîç D√âTAIL DES AJUSTEMENTS LOTECART:")
        all_lotecart = lotecart_new + lotecart_updates
        
        for i, adj in enumerate(all_lotecart, 1):
            coherent = abs(adj["QUANTITE_CORRIGEE"] - adj["QUANTITE_REELLE_SAISIE"]) < 0.001
            status = "‚úÖ" if coherent else "‚ùå"
            print(f"      {status} {i}. {adj['CODE_ARTICLE']}: "
                  f"Corrig√©e={adj['QUANTITE_CORRIGEE']}, "
                  f"Saisie={adj['QUANTITE_REELLE_SAISIE']}, "
                  f"Type={adj['TYPE_LOT']}")
        
        # 5. G√©n√©ration du fichier final de test
        print("\nüìÑ 5. G√âN√âRATION DU FICHIER FINAL DE TEST")
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, encoding='utf-8') as f:
            test_final_path = f.name
        
        header_lines = [
            "E;SESSION001;test;1;SITE01;;;;;;;;;;",
            "L;SESSION001;INV001;1;SITE01;;;;;;;;;;"
        ]
        
        final_path, generation_summary = priority_processor.generate_coherent_final_file(
            "test_session", original_df, completed_df, header_lines, test_final_path
        )
        
        print(f"   ‚úÖ Fichier final g√©n√©r√©: {final_path}")
        print(f"   üìä Lignes trait√©es: {generation_summary['total_lines_processed']}")
        print(f"   üìä LOTECART appliqu√©s: {generation_summary['total_lotecart_lines']}")
        print(f"   üìä Validation: {'‚úÖ' if generation_summary['validation']['success'] else '‚ùå'}")
        
        # 6. Validation finale stricte
        print("\nüîç 6. VALIDATION FINALE STRICTE")
        
        validation = generation_summary["validation"]
        
        print(f"   üìä Lignes LOTECART trouv√©es: {validation['lotecart_lines_found']}")
        print(f"   üìä Indicateurs corrects: {validation['correct_indicators']}")
        print(f"   üìä Quantit√©s coh√©rentes: {validation['coherent_quantities']}")
        
        if validation["issues"]:
            print(f"   ‚ö†Ô∏è Probl√®mes d√©tect√©s:")
            for issue in validation["issues"][:5]:
                print(f"      - {issue}")
        
        # 7. Analyse d√©taill√©e du fichier final
        print("\nüìã 7. ANALYSE D√âTAILL√âE DU FICHIER FINAL")
        
        print("   Contenu des lignes LOTECART:")
        with open(final_path, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                if 'LOTECART' in line:
                    parts = line.strip().split(';')
                    if len(parts) >= 15:
                        article = parts[8]
                        qty_f = parts[5]
                        qty_g = parts[6]
                        indicator = parts[7]
                        coherent = (qty_f == qty_g and indicator == '2' and float(qty_f) > 0)
                        status = "‚úÖ" if coherent else "‚ùå"
                        print(f"      {status} Ligne {line_num}: {article} - F={qty_f}, G={qty_g}, Ind={indicator}")
        
        # 8. R√©sultat final
        print("\n" + "=" * 80)
        
        success = (
            validation["success"] and
            lotecart_summary["quality_score"] == 100 and
            len(validation["issues"]) == 0
        )
        
        if success:
            print("üéâ TEST STRICT PRIORITAIRE LOTECART R√âUSSI !")
            print("    ‚úÖ Tous les candidats LOTECART ont √©t√© d√©tect√©s")
            print("    ‚úÖ Tous les ajustements LOTECART sont coh√©rents (F = G)")
            print("    ‚úÖ Tous les indicateurs LOTECART sont corrects (= 2)")
            print("    ‚úÖ Aucune incoh√©rence d√©tect√©e dans le fichier final")
            print("    ‚úÖ Traitement prioritaire strict fonctionnel")
            print("\nüí° PROBL√àME R√âSOLU D√âFINITIVEMENT:")
            print("    ‚Ä¢ Priorisation stricte des LOTECART")
            print("    ‚Ä¢ Validation blocante avant autres ajustements")
            print("    ‚Ä¢ Coh√©rence garantie F = G pour LOTECART")
            print("    ‚Ä¢ Tra√ßabilit√© compl√®te des quantit√©s saisies")
        else:
            print("‚ùå TEST STRICT PRIORITAIRE LOTECART √âCHOU√â !")
            print("    ‚ö†Ô∏è Des incoh√©rences persistent dans le traitement LOTECART")
            print(f"    ‚ö†Ô∏è Score qualit√©: {lotecart_summary['quality_score']:.1f}%")
            print(f"    ‚ö†Ô∏è Probl√®mes: {len(validation['issues'])}")
            print("\nüîß ACTIONS REQUISES:")
            print("    ‚Ä¢ V√©rifier la logique de d√©tection LOTECART")
            print("    ‚Ä¢ V√©rifier la logique de g√©n√©ration des ajustements")
            print("    ‚Ä¢ V√©rifier la logique d'application au fichier final")
        
        # Nettoyage
        os.unlink(final_path)
        
        return success
        
    except Exception as e:
        print(f"‚ùå ERREUR LORS DU TEST: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_lotecart_detection_only():
    """Test isol√© de la d√©tection LOTECART"""
    print("\nüî¨ TEST ISOL√â: D√âTECTION LOTECART")
    print("-" * 50)
    
    try:
        # Donn√©es de test pour d√©tection
        completed_data = {
            'Code Article': ['ART001', 'ART002', 'ART003', 'ART004'],
            'Num√©ro Inventaire': ['INV001'] * 4,
            'Quantit√© Th√©orique': [100, 0, 50, 0],  # ART002 et ART004 sont candidats
            'Quantit√© R√©elle': [95, 25, 48, 10],    # ART002 et ART004 ont qt√© r√©elle > 0
            'Num√©ro Lot': ['LOT001', '', 'LOT003', '']
        }
        completed_df = pd.DataFrame(completed_data)
        
        # Test de d√©tection
        processor = LotecartProcessor()
        candidates = processor.detect_lotecart_candidates(completed_df)
        
        print(f"   üìä Candidats d√©tect√©s: {len(candidates)}")
        print(f"   üìä Candidats attendus: 2 (ART002, ART004)")
        
        if len(candidates) == 2:
            print("   ‚úÖ Nombre de candidats correct")
            
            # V√©rifier les propri√©t√©s
            for _, candidate in candidates.iterrows():
                article = candidate['Code Article']
                theo = candidate['Quantit√© Th√©orique']
                real = candidate['Quantit√© R√©elle']
                type_lot = candidate.get('Type_Lot', 'N/A')
                
                if theo == 0 and real > 0 and type_lot == 'lotecart':
                    print(f"   ‚úÖ {article}: Th√©o={theo}, R√©el={real}, Type={type_lot}")
                else:
                    print(f"   ‚ùå {article}: Th√©o={theo}, R√©el={real}, Type={type_lot}")
                    return False
            
            print("   ‚úÖ D√âTECTION LOTECART PARFAITE")
            return True
        else:
            print(f"   ‚ùå Nombre de candidats incorrect: {len(candidates)} ‚â† 2")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur test d√©tection: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üéØ R√âSOLUTION D√âFINITIVE DU BUG LOTECART")
    print("=" * 80)
    print("PROBL√àME: Incoh√©rences dans le fichier final - certaines lignes LOTECART")
    print("          ont quantit√© th√©orique = 0 au lieu de la quantit√© saisie")
    print("SOLUTION: Traitement prioritaire strict avec validation blocante")
    print("=" * 80)
    
    # Test 1: D√©tection isol√©e
    print("\nüî¨ TEST 1: D√âTECTION LOTECART ISOL√âE")
    detection_ok = test_lotecart_detection_only()
    
    # Test 2: Traitement complet
    print("\nüî¨ TEST 2: TRAITEMENT COMPLET STRICT")
    processing_ok = test_strict_lotecart_priority()
    
    # R√©sultat global
    print("\n" + "=" * 80)
    print("üéØ R√âSULTAT GLOBAL DES TESTS")
    print("=" * 80)
    
    if detection_ok and processing_ok:
        print("üéâ TOUS LES TESTS R√âUSSIS - BUG LOTECART R√âSOLU D√âFINITIVEMENT !")
        print("\n‚úÖ CORRECTIONS IMPL√âMENT√âES:")
        print("   ‚Ä¢ D√©tection stricte des candidats LOTECART")
        print("   ‚Ä¢ Priorisation absolue du traitement LOTECART")
        print("   ‚Ä¢ Validation blocante avant autres ajustements")
        print("   ‚Ä¢ Coh√©rence garantie F = G pour LOTECART")
        print("   ‚Ä¢ Tra√ßabilit√© compl√®te des quantit√©s saisies")
        print("\nüöÄ PR√äT POUR LA PRODUCTION:")
        print("   ‚Ä¢ Aucune incoh√©rence possible")
        print("   ‚Ä¢ Traitement d√©terministe")
        print("   ‚Ä¢ Validation automatique")
        print("   ‚Ä¢ Logs d√©taill√©s pour tra√ßabilit√©")
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â - CORRECTIONS SUPPL√âMENTAIRES N√âCESSAIRES")
        print(f"   ‚Ä¢ D√©tection LOTECART: {'‚úÖ' if detection_ok else '‚ùå'}")
        print(f"   ‚Ä¢ Traitement complet: {'‚úÖ' if processing_ok else '‚ùå'}")
        print("\nüîß ACTIONS REQUISES:")
        if not detection_ok:
            print("   ‚Ä¢ Corriger la logique de d√©tection LOTECART")
        if not processing_ok:
            print("   ‚Ä¢ Corriger la logique de traitement prioritaire")

if __name__ == "__main__":
    main()